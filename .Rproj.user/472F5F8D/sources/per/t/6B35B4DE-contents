#'Function to generate if there is an issue or not
#'
#' @param infos info of the smart surveys
#'
f_smart_is_issue <- function(infos){
  date_survey <- ifelse(as.integer(infos[3]) > as.integer(format(Sys.Date(), "%Y")), yes = NA, no = infos[3])
  if(is.na(infos[2]) & is.na(date_survey)){
    issue = TRUE
    type_issue = 'Unknown Date and Admin'
  }else if(is.na(infos[2])){
    issue = TRUE
    type_issue = 'Unknown Admin'
  }else if(is.na(date_survey)){
    issue = TRUE
    type_issue = 'Unknown Date'
  }else{
    issue = FALSE
    type_issue = ""
  }
  return(c(issue, type_issue))
}

#' Function to extraction nutrition content of a SMART Survey
#'
#' @param log_file Log file
#' @param infos information extracted from the smart survey
#' @param nutrition_data nutrition data containing in the smart
#' @param mortality_data mortality data containing in the smart
#' @param clusters_data clusters data containing in the smart
#' @return [data.frame] return the log file updated
#' @export
f_update_log_file <- function(log_file, name_file, new_name,
                              infos, nutrition_data, mortality_data, clusters_data,
                              metadata_data){
  #date_survey <- ifelse(as.integer(infos[3]) > as.integer(format(Sys.Date(), "%Y")), yes = NA, no = infos[3])
  name_admin <- ifelse(is.na(infos[2]), yes = 'NA', no =infos[1])
  issues <- f_smart_is_issue(infos)
  issue <- issues[1]
  type_issue <- issues[2]
  access_nutrition <- ifelse(length(nutrition_data) == 0, yes = FALSE, no =TRUE)
  access_mortality <- ifelse(length(mortality_data) == 0, yes = FALSE, no =TRUE)
  access_clusters <- ifelse(length(clusters_data) == 0, yes = FALSE, no =TRUE)
  data <- data.frame(old_name = name_file,
                     new_name=new_name,
                    time_smart_process = format(Sys.time(), "%a %b %d %X %Y"),
                    admin_level_survey = infos[2],
                    admin_name_survey = name_admin,
                    type_survey = infos[9],
                    min_year_survey = infos[5],
                    min_month_survey = infos[4],
                    min_day_survey = infos[3],
                    max_month_survey = infos[7],
                    max_year_survey = infos[8],
                    max_day_survey = infos[6],
                    is_issue = issue,
                    type_of_issue = type_issue,
                    access_nutrition = access_nutrition,
                    access_mortality = access_mortality,
                    access_clusters = access_clusters,
                    recall_days = metadata_data$recall_days,
                    inj_code = metadata_data$inj_code,
                    viol_code = metadata_data$viol_code,
                    unk_code = metadata_data$unk_code)
  return(rbind(log_file, data))
}

#' Function to extraction nutrition content of a SMART Survey
#'
#' @param infos information extracted from the smart survey
#' @return new_name of the smart survey
#' @export
f_generate_new_name <- function(log_file, country, infos){
  name <- paste(stringr::str_to_lower(country), '_',
                infos[2], '_',
                gsub("\u00a0", "", infos[1]), '_',
                infos[5],
                '_', infos[4], sep='')
  pattern_found <- log_file[['new_name']][grepl(name, log_file[['new_name']])]
  if(length(pattern_found) == 0){
    name <- paste(stringr::str_to_lower(country), '_',
                  infos[2], '_',
                  gsub("\u00a0", "", infos[1]), '_',
                  infos[5],
                  '_', infos[4], '_', 0, sep='')
  }else{
    number <- max(as.integer(sapply(strsplit(pattern_found, "_"),"[[", 6)))
    name <- paste(stringr::str_to_lower(country), '_',
                 infos[2], '_',
                 gsub("\u00a0", "", infos[1]), '_',
                 infos[5],
                 '_', infos[4], '_', number+1, sep='')
  }
  return(name)
}

#' Function to create a issue folder in the output folder
#'
#' @param output_folder Folder where the results need to be saved
create_issue_folder <- function(output_folder){
  check_and_generate_folder(paste(output_folder, '/smart_with_issue', sep=""))
}

#' Function to check if the folder exist and if not create it
check_and_generate_folder <- function(name){
  if (file.exists(paste(name, sep='')) == FALSE){
    dir.create(file.path(paste(name, sep='')),recursive = TRUE)
  }
}

#' Function to generate log file
#'
#' @return [data.frame] log file
generate_log_file <- function(output_folder){
  if(length(which(list.files(output_folder) == 'metadata.csv')) == 0){ ##if logfile doesnt exist
    log_file <- data.frame()
  }else{
    log_file <- read.csv(paste(output_folder, '/metadata.csv', sep=""))
  }
  return(log_file)
}

#' Function to save the SMART Survey in the right folder (the one with the new name or the Issue one)
#'
#' @param output_folder output folder to save the smart content
#' @param log_file log file
#' @param new_name new name of the smart survey used to generate a new folder
#' @param nutrition_data nutrition data containing in the smart
#' @param mortality_data mortality data containing in the smart
#' @param clusters_data clusters data containing in the smart
#' @export
f_save_smart <- function(smart_folder, output_folder, file, new_name,
                         infos, nutrition_data, mortality_data, clusters_data,
                         metadata_data){
  issues <- f_smart_is_issue(infos)
  issue <- issues[1]
  if(issue == TRUE){
    file.copy(paste(smart_folder, file, sep = ""),
              paste(output_folder, '/smart_with_issue', sep=""))
  }else{
    folder_name <- paste(output_folder, '/', new_name, sep="")
    check_and_generate_folder(folder_name)
    file.copy(paste(smart_folder, file, sep = ""),
              folder_name)
    write.table(nutrition_data, file = paste(folder_name, '/', new_name, '_nutrition_data.csv', sep=""),
                append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
    write.table(mortality_data, file = paste(folder_name,'/', new_name, '_mortality_data.csv', sep=""),
                append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
    write.table(clusters_data, file = paste(folder_name, '/', new_name, '_clusters_data.csv', sep=""),
                append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
  }

}
