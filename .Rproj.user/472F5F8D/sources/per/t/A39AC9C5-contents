#' Function to extract the different component of a SMART Survey
#'
#' @details Function to extract information from a unique SMART Survey
#' @param name_file name of SMART Survey
#' @param smart_content SMART Survey content
#' @param admins_list obtained through the function f_location_possibility
#' @return [list] list containing: name_admin, level_admin, day/month/year min and max, type_survey.
#' @export
f_extract_info_smart <- function(name_file, smart_content, admins_list){
  if(is_individual_survey(smart_content)){
    type_survey <- 'individual'
  }else{
    type_survey <- 'aggregate'
  }
  date <- find_date(smart_content)
  area <- find_stratum_level(name_file, smart_content, admins_list)
  ## name_admin1, level_admin, month, year, type_survey
  return(c(area, date, type_survey))
}

#' test if the survey is an individual or an aggregate one
#'
#' @param smart_content coontent of the SMART Survey
#' @return TRUE is the .as file is an individual one
is_individual_survey <- function(smart_content){
  pos <- grep("\\Mortality_new:", smart_content, ignore.cas=TRUE, useBytes = TRUE)
  pos2 <- grep("\\Mor_individual:", smart_content, ignore.cas=TRUE, useBytes = TRUE)
  if((pos2 - pos) != 1){
    return(FALSE)
  }else{
    return(TRUE)
  }
}

#' Find the date using .as information
#'
#' @param smart_content content of .as file
#' @return Date - Day, Month, Year
find_date <- function(smart_content){
  # Extract the format of the data available at the beginning of the file
  date_structure <- strsplit(smart_content[1], "")[[1]]
  # Then extract the date in the file content
  find_date <- smart_content[grep('/\\d{2}(\\d{2})?', smart_content)]
  struct_date <- 'type_1'
  if(length(find_date) == 0){
    find_date <- smart_content[grep('-\\d{2}(\\d{2})?', smart_content)]
    struct_date <- 'type_2'
  }
  date <- sapply(strsplit(find_date, "\t"),"[[",1)
  if(length(date)==0){
    #Case where we have small format for the year
    find_date <- smart_content[grep('/1', smart_content)]
    date <- sapply(strsplit(find_date, "\t"),"[[",1)
    if(length(date) == 0){
      return(c(NA, NA, NA, NA, NA, NA))
    }
  }
  date_structure <- ifelse(date_structure == 'y', yes=stringr::str_to_upper(date_structure), no=date_structure)
  if(struct_date == 'type_1'){
    date_ <- as.Date(date, format = paste('%', date_structure[1],
                                         '/%', date_structure[2],
                                         '/%', date_structure[3], sep=""))

    if(as.integer(strsplit(as.character(date_[1]),split = '-')[[1]][1]) < 2000){
      date_structure <- ifelse(date_structure == 'Y', yes=stringr::str_to_lower(date_structure), no=date_structure)
      date_ <- as.Date(date, format = paste('%', date_structure[1],
                                           '/%', date_structure[2],
                                           '/%', date_structure[3], sep=""))
    }
  }else{
    date_ <- as.Date(date, format = paste('%', date_structure,
                                         '-%', date_structure[2],
                                         '-%', date_structure[3], sep=""))
  }
  date_ <- date_[!is.na(date_)]
  min_date <- min(date_)
  max_date <- max(date_)
  ## Then find all the different date & extract the min of those date
  return(c(lubridate::day(min_date),
           lubridate::month(min_date), lubridate::year(min_date),
           lubridate::day(max_date),
           lubridate::month(max_date), lubridate::year(max_date)))
}

#' Extract file name information and where the location could be in the smart content
#'
#' @param name_file name of the file
#' @param smart_content content of the SMART
#' @return list of information
extract_location_smart <- function(name_file, smart_content){
  ## Extract the part of the survey where the initial name of the smart is saved
  pos <- grep("\\Planning:", smart_content, ignore.cas=TRUE, useBytes = TRUE)
  pos2 <- grep("Cluster", smart_content, ignore.cas=TRUE)[2]
  #Concatenate those information with the one obtained in the file name
  information_names <- c(lapply(strsplit(stringr::str_split(name_file, stringr::fixed('.as'))[[1]], "_|/| "), tolower)[[1]],
                         lapply(strsplit(smart_content[(pos+1):(pos2-1)], "_|/| "), tolower)[[1]])
  information_names <- information_names[information_names!=""]
  return(information_names)
}

#' Find the stratum level using .as information and settlement.csv file
#'
#' @param name name of the .as file
#' @return Two elements -- type of level and the name of the settlement/district/region/lhz
find_stratum_level <- function(name_file, smart_content, admin_list){
  #Case where we don't have a specific country
  if(length(nrow(admin_list)) == 0){
    return(c('unspecified', 'admin0'))
  }
  # First be sure we are comparing everything without punctuations and spaces
  admin_list <- admin_list |>
    dplyr::mutate(eventual_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", iconv(eventual_name,"WINDOWS-1252","UTF-8"))),
                  right_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", iconv(right_name,"WINDOWS-1252","UTF-8"))))
  # Then extract the infromation in the SMART Survey
  information_names <- extract_location_smart(name_file, smart_content)
  # If file name is empty or no information is available in the .as file
  if(length(information_names) == 0){
    return(c(NA, NA))
  }
  # Else we are going to compare all the different information and find the lowest admin level
  final_res <- c(NA, NA)
  for(elmt in information_names){
    ##if the name of the file corresponds to a settlement or a district
    if(elmt %in% admin_list$eventual_name_low){
      # if we already have access at the lowest admin level
      if(is.na(final_res[2])){
        final_res[1] <- admin_list[which(elmt == admin_list$eventual_name_low), 'right_name']
        final_res[2] <- admin_list[which(elmt == admin_list$eventual_name_low), 'level']
      }else if(final_res[2] != 'admin2'){
        final_res[1] <- admin_list[which(elmt == admin_list$eventual_name_low), 'right_name']
        final_res[2] <- admin_list[which(elmt == admin_list$eventual_name_low), 'level']
      }
    }else if(elmt %in% admin_list$right_name_low){
      if(is.na(final_res[2])){
        final_res[1] <- admin_list[which(elmt == admin_list$right_name_low), 'right_name']
        final_res[2] <- admin_list[which(elmt == admin_list$right_name_low), 'level']
      }else if(final_res[2] != 'admin2'){
        final_res[1] <- admin_list[which(elmt == admin_list$right_name_low), 'right_name']
        final_res[2] <- admin_list[which(elmt == admin_list$right_name_low), 'level']
      }
    }
  }
  return(final_res)
}
