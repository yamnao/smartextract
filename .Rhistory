#' @return [data.frame] 3 integers for three different types of death: unknow, injury and violence
f_find_codes <- function(smart_content){
pos <- grep('Mor_individual_options', smart_content, ignore.case=TRUE)
pos_unk <- grep('Unknown', smart_content, ignore.case = TRUE)
pos_inj <- grep('Injury', smart_content, ignore.case = TRUE)
pos_viol <- grep('Violence', smart_content, ignore.case = TRUE)
if(length(pos_unk) != 0){
score_unk <- pos_unk - pos
}else{
score_unk <- 0
}
if(length(pos_inj) != 0){
score_inj <- pos_inj - pos
}else{
score_inj <- 0
}
if(length(pos_viol) != 0){
score_viol <- pos_viol - pos
}else{
score_viol <- 0
}
return(c(score_unk, score_inj, score_viol))
}
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
file <- files[62]
file <- files[61]
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Extract the format of the data available at the beginning of the file
date_structure <- strsplit(smart_content[1], "")[[1]]
# Then extract the date in the file content
find_date <- smart_content[grep('/\\d{2}(\\d{2})?', smart_content)]
struct_date <- 'type_1'
if(length(find_date) == 0){
find_date <- smart_content[grep('-\\d{2}(\\d{2})?', smart_content)]
struct_date <- 'type_2'
}
date <- sapply(strsplit(find_date, "\t"),"[[",1)
if(length(date)==0){
#Case where we have small format for the year
find_date <- smart_content[grep('/1', smart_content)]
date <- sapply(strsplit(find_date, "\t"),"[[",1)
if(length(date) == 0){
return(c(NA, NA, NA, NA, NA, NA))
}
}
date_structure <- ifelse(date_structure == 'y', yes=stringr::str_to_upper(date_structure), no=date_structure)
struct_date
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_
as.integer(strsplit(as.character(date_[1]),split = '-')[[1]][1])
date_[!is.na(date_), ]
date_[!is.na(date_)]
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_ <- date_[!is.na(date_), ]
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_ <- date_[!is.na(date_)]
as.integer(strsplit(as.character(date_[1]),split = '-')[[1]][1])
date_structure <- ifelse(date_structure == 'Y', yes=stringr::str_to_lower(date_structure), no=date_structure)
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_
date_structure
as.integer(strsplit(as.character(date_[1]),split = '-')[[1]][1])
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_ <- date_[!is.na(date_)]
as.integer(strsplit(as.character(date_[1]),split = '-')[[1]][1])
date_
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_ <- date_[!is.na(date_)]
date_
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_
# Extract the format of the data available at the beginning of the file
date_structure <- strsplit(smart_content[1], "")[[1]]
# Then extract the date in the file content
find_date <- smart_content[grep('/\\d{2}(\\d{2})?', smart_content)]
struct_date <- 'type_1'
if(length(find_date) == 0){
find_date <- smart_content[grep('-\\d{2}(\\d{2})?', smart_content)]
struct_date <- 'type_2'
}
date <- sapply(strsplit(find_date, "\t"),"[[",1)
if(length(date)==0){
#Case where we have small format for the year
find_date <- smart_content[grep('/1', smart_content)]
date <- sapply(strsplit(find_date, "\t"),"[[",1)
if(length(date) == 0){
return(c(NA, NA, NA, NA, NA, NA))
}
}
date_structure <- ifelse(date_structure == 'y', yes=stringr::str_to_upper(date_structure), no=date_structure)
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_
date_[!is.na(date_)]
as.integer(strsplit(as.character(date_[1]),split = '-')[[1]][1]) < 2000
date_ <- date_[!is.na(date_)]
as.integer(strsplit(as.character(date_[1]),split = '-')[[1]][1])
as.integer(strsplit(as.character(date_[1]),split = '-')[[1]][1]) < 2000
date_ <- date_[!is.na(date_)]
min_date <- min(date_)
max_date <- max(date_)
min_date
date_[which(as.integer(strsplit(as.character(date_[1]),split = '-')[[1]]) > 2000)]
# Extract the format of the data available at the beginning of the file
date_structure <- strsplit(smart_content[1], "")[[1]]
# Then extract the date in the file content
find_date <- smart_content[grep('/\\d{2}(\\d{2})?', smart_content)]
struct_date <- 'type_1'
if(length(find_date) == 0){
find_date <- smart_content[grep('-\\d{2}(\\d{2})?', smart_content)]
struct_date <- 'type_2'
}
date <- sapply(strsplit(find_date, "\t"),"[[",1)
if(length(date)==0){
#Case where we have small format for the year
find_date <- smart_content[grep('/1', smart_content)]
date <- sapply(strsplit(find_date, "\t"),"[[",1)
if(length(date) == 0){
return(c(NA, NA, NA, NA, NA, NA))
}
}
date_structure <- ifelse(date_structure == 'y', yes=stringr::str_to_upper(date_structure), no=date_structure)
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_ <- date_[!is.na(date_)]
date_[which(as.integer(strsplit(as.character(date_[1]),split = '-')[[1]]) > 2000)]
date_[which(as.integer(strsplit(as.character(date_[1]),split = '-')) > 2000)]
date_[which(as.integer(strsplit(as.character(date_),split = '-')[[1]]) > 2000)]
as.integer(strsplit(as.character(date_),split = '-')
)
as.integer(strsplit(as.character(date_),split = '-'))
year(date_)
years(date_)
lubridate::year(date_)
date_[which(lubridate::year(date_) > 2000]
date_[which(lubridate::year(date_) > 2000)]
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_ <- date_[!is.na(date_)]
if(as.integer(strsplit(as.character(date_[1]),split = '-')[[1]][1]) < 2000){
date_structure <- ifelse(date_structure == 'Y', yes=stringr::str_to_lower(date_structure), no=date_structure)
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_ <- date_[which(lubridate::year(date_) > 2000)]
min_date <- min(date_)
max_date <- max(date_)
}
mind_date
min_date
# Extract the format of the data available at the beginning of the file
date_structure <- strsplit(smart_content[1], "")[[1]]
# Then extract the date in the file content
find_date <- smart_content[grep('/\\d{2}(\\d{2})?', smart_content)]
struct_date <- 'type_1'
if(length(find_date) == 0){
find_date <- smart_content[grep('-\\d{2}(\\d{2})?', smart_content)]
struct_date <- 'type_2'
}
date <- sapply(strsplit(find_date, "\t"),"[[",1)
if(length(date)==0){
#Case where we have small format for the year
find_date <- smart_content[grep('/1', smart_content)]
date <- sapply(strsplit(find_date, "\t"),"[[",1)
if(length(date) == 0){
return(c(NA, NA, NA, NA, NA, NA))
}
}
date_structure <- ifelse(date_structure == 'y', yes=stringr::str_to_upper(date_structure), no=date_structure)
date_ <- as.Date(date, format = paste('%', date_structure[1],
'/%', date_structure[2],
'/%', date_structure[3], sep=""))
date_ <- date_[!is.na(date_)]
date_ <- date_[which(lubridate::year(date_) > 2000)]
min_date <- min(date_)
max_date <- max(date_)
date_
min_date
max_date
library(smartextract)
40+13
file <- files[52]
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
49+13
file <- files[63]
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
pos <- grep("Cluster", smart_content, ignore.cas=TRUE)[2]
pos2 <- grep("\\Training_new:", smart_content, ignore.cas=TRUE, useBytes = TRUE)
pos2
pos
clusters_data <- smart_content[(pos+10):(pos2-1)]
clusters_data<- strsplit(clusters_data, split = "\t")
clusters_data <- lapply(clusters_data, `length<-`, max(lengths(clusters_data)))
clusters_data <- as.data.frame(do.call(rbind, clusters_data))
clusters_data
colnames(clusters_data) <- c('settlements', 'pop', 'nb_cluster')
clusters_data <- dplyr::select(clusters_data, c('settlements', 'nb_cluster'))
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster <- NA
clusters_data
pos <- grep("Cluster", smart_content, ignore.cas=TRUE)[2]
pos2 <- grep("\\Training_new:", smart_content, ignore.cas=TRUE, useBytes = TRUE)
if(length(pos2) == 0){
return(data.frame())
}
clusters_data <- smart_content[(pos+10):(pos2-1)]
clusters_data<- strsplit(clusters_data, split = "\t")
clusters_data <- lapply(clusters_data, `length<-`, max(lengths(clusters_data)))
clusters_data <- as.data.frame(do.call(rbind, clusters_data))
if(nrow(clusters_data) < 3){
return(data.frame())
}
colnames(clusters_data) <- c('settlements', 'pop', 'nb_cluster')
clusters_data
clusters_data <- dplyr::select(clusters_data, c('settlements', 'nb_cluster'))
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster <- NA
clusters_data <- tidyr::drop_na(clusters_data)
clusters_data
clusters_data[which(clusters_data$nb_cluster == ""),]
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster <- NA
pos <- grep("Cluster", smart_content, ignore.cas=TRUE)[2]
pos2 <- grep("\\Training_new:", smart_content, ignore.cas=TRUE, useBytes = TRUE)
if(length(pos2) == 0){
return(data.frame())
}
clusters_data <- smart_content[(pos+10):(pos2-1)]
clusters_data<- strsplit(clusters_data, split = "\t")
clusters_data <- lapply(clusters_data, `length<-`, max(lengths(clusters_data)))
clusters_data <- as.data.frame(do.call(rbind, clusters_data))
if(nrow(clusters_data) < 3){
return(data.frame())
}
colnames(clusters_data) <- c('settlements', 'pop', 'nb_cluster')
clusters_data <- dplyr::select(clusters_data, c('settlements', 'nb_cluster'))
if(nrow(clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster)!= 0){
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster <- NA
}
pos <- grep("Cluster", smart_content, ignore.cas=TRUE)[2]
pos2 <- grep("\\Training_new:", smart_content, ignore.cas=TRUE, useBytes = TRUE)
if(length(pos2) == 0){
return(data.frame())
}
clusters_data <- smart_content[(pos+10):(pos2-1)]
clusters_data<- strsplit(clusters_data, split = "\t")
clusters_data <- lapply(clusters_data, `length<-`, max(lengths(clusters_data)))
clusters_data <- as.data.frame(do.call(rbind, clusters_data))
if(nrow(clusters_data) < 3){
return(data.frame())
}
colnames(clusters_data) <- c('settlements', 'pop', 'nb_cluster')
clusters_data <- dplyr::select(clusters_data, c('settlements', 'nb_cluster'))
if(length(clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster)!= 0){
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster <- NA
}
clusters_data <- tidyr::drop_na(clusters_data)
clusters_data$settlements <- tolower(clusters_data$settlements)
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:punct:]]", "")
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:space:]]", "")
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:digit:]]+", "")
clusters_data
library(smartextract)
330+44
file <- files[375]
pos <- grep("Cluster", smart_content, ignore.cas=TRUE)[2]
pos2 <- grep("\\Training_new:", smart_content, ignore.cas=TRUE, useBytes = TRUE)
if(length(pos2) == 0){
return(data.frame())
}
clusters_data <- smart_content[(pos+10):(pos2-1)]
clusters_data<- strsplit(clusters_data, split = "\t")
clusters_data <- lapply(clusters_data, `length<-`, max(lengths(clusters_data)))
clusters_data <- as.data.frame(do.call(rbind, clusters_data))
if(nrow(clusters_data) < 3){
return(data.frame())
}
colnames(clusters_data) <- c('settlements', 'pop', 'nb_cluster')
clusters_data <- dplyr::select(clusters_data, c('settlements', 'nb_cluster'))
if(length(clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster)!= 0){
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster <- NA
}
clusters_data <- tidyr::drop_na(clusters_data)
clusters_data$settlements <- tolower(clusters_data$settlements)
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:punct:]]", "")
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:space:]]", "")
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:digit:]]+", "")
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
330+74
330+44
330+44
file <- files[374]
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
file <- files[376]
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
library(smartextract)
files
file <- files[377]
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
print(name_file)
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
f_save_smart(smart_folder, output_folder, file, new_name,
infos, nutrition_data, mortality_data, clusters_data)
file
files
file <- files[378]
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
print(name_file)
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
# Save the smart data
f_save_smart(smart_folder, output_folder, file, new_name,
infos, nutrition_data, mortality_data, clusters_data)
log_file
library(smartextract)
install.packages('roxygen2')
library(roxygen2)
install.packages('roxygen2')
library(roxygen2)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize(roclets = c("namespace", "rd"))
library(smartextract)
file <- 'C://Users/oucht/OneDrive - London School of Hygiene and Tropical Medicine/Documents/Kenya/ken_estimation_mortality/01_extract_smart_surveys/data_for_app/ken_admins_options.xlsx'
ken_admins_options <- rio::import(file)
ken_admins_options
save(ken_admins_options, file='data/ken_admins_options.rda')
f
?count
?ifelse
?scales
log_file <- rio::import('C://Users/YamnaOuchtar/OneDrive - London School of Hygiene and Tropical Medicine/Documents/SMART_Surveys_App/reassure_documentation/results/metadata.csv)
''
xwq
`1_)`
)
dq#`1`
exit()
