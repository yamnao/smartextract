}
colnames(clusters_data) <- c('settlements', 'pop', 'nb_cluster')
clusters_data
clusters_data <- dplyr::select(clusters_data, c('settlements', 'nb_cluster'))
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster <- NA
clusters_data <- tidyr::drop_na(clusters_data)
clusters_data
clusters_data[which(clusters_data$nb_cluster == ""),]
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster <- NA
pos <- grep("Cluster", smart_content, ignore.cas=TRUE)[2]
pos2 <- grep("\\Training_new:", smart_content, ignore.cas=TRUE, useBytes = TRUE)
if(length(pos2) == 0){
return(data.frame())
}
clusters_data <- smart_content[(pos+10):(pos2-1)]
clusters_data<- strsplit(clusters_data, split = "\t")
clusters_data <- lapply(clusters_data, `length<-`, max(lengths(clusters_data)))
clusters_data <- as.data.frame(do.call(rbind, clusters_data))
if(nrow(clusters_data) < 3){
return(data.frame())
}
colnames(clusters_data) <- c('settlements', 'pop', 'nb_cluster')
clusters_data <- dplyr::select(clusters_data, c('settlements', 'nb_cluster'))
if(nrow(clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster)!= 0){
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster <- NA
}
pos <- grep("Cluster", smart_content, ignore.cas=TRUE)[2]
pos2 <- grep("\\Training_new:", smart_content, ignore.cas=TRUE, useBytes = TRUE)
if(length(pos2) == 0){
return(data.frame())
}
clusters_data <- smart_content[(pos+10):(pos2-1)]
clusters_data<- strsplit(clusters_data, split = "\t")
clusters_data <- lapply(clusters_data, `length<-`, max(lengths(clusters_data)))
clusters_data <- as.data.frame(do.call(rbind, clusters_data))
if(nrow(clusters_data) < 3){
return(data.frame())
}
colnames(clusters_data) <- c('settlements', 'pop', 'nb_cluster')
clusters_data <- dplyr::select(clusters_data, c('settlements', 'nb_cluster'))
if(length(clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster)!= 0){
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster <- NA
}
clusters_data <- tidyr::drop_na(clusters_data)
clusters_data$settlements <- tolower(clusters_data$settlements)
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:punct:]]", "")
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:space:]]", "")
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:digit:]]+", "")
clusters_data
library(smartextract)
330+44
file <- files[375]
pos <- grep("Cluster", smart_content, ignore.cas=TRUE)[2]
pos2 <- grep("\\Training_new:", smart_content, ignore.cas=TRUE, useBytes = TRUE)
if(length(pos2) == 0){
return(data.frame())
}
clusters_data <- smart_content[(pos+10):(pos2-1)]
clusters_data<- strsplit(clusters_data, split = "\t")
clusters_data <- lapply(clusters_data, `length<-`, max(lengths(clusters_data)))
clusters_data <- as.data.frame(do.call(rbind, clusters_data))
if(nrow(clusters_data) < 3){
return(data.frame())
}
colnames(clusters_data) <- c('settlements', 'pop', 'nb_cluster')
clusters_data <- dplyr::select(clusters_data, c('settlements', 'nb_cluster'))
if(length(clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster)!= 0){
clusters_data[which(clusters_data$nb_cluster == ""),]$nb_cluster <- NA
}
clusters_data <- tidyr::drop_na(clusters_data)
clusters_data$settlements <- tolower(clusters_data$settlements)
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:punct:]]", "")
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:space:]]", "")
clusters_data$settlements <- stringr::str_replace_all(clusters_data$settlements , "[[:digit:]]+", "")
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
330+74
330+44
330+44
file <- files[374]
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
file <- files[376]
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
library(smartextract)
files
file <- files[377]
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
print(name_file)
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
f_save_smart(smart_folder, output_folder, file, new_name,
infos, nutrition_data, mortality_data, clusters_data)
file
files
file <- files[378]
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
print(name_file)
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
new_name <- gsub(" ", "", new_name)
new_name <- substr(new_name, start=1, stop=30)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[9])
clusters_data <- f_extract_clusters_data(smart_content)
# Extract metadata
metadata_data <- f_extract_metadata_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos,
nutrition_data, mortality_data, clusters_data,
metadata_data)
# Save the smart data
f_save_smart(smart_folder, output_folder, file, new_name,
infos, nutrition_data, mortality_data, clusters_data)
log_file
library(smartextract)
install.packages('roxygen2')
library(roxygen2)
install.packages('roxygen2')
library(roxygen2)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize(roclets = c("namespace", "rd"))
library(smartextract)
file <- 'C://Users/oucht/OneDrive - London School of Hygiene and Tropical Medicine/Documents/Kenya/ken_estimation_mortality/01_extract_smart_surveys/data_for_app/ken_admins_options.xlsx'
ken_admins_options <- rio::import(file)
ken_admins_options
save(ken_admins_options, file='data/ken_admins_options.rda')
f
?count
?ifelse
?scales
log_file <- rio::import('C://Users/YamnaOuchtar/OneDrive - London School of Hygiene and Tropical Medicine/Documents/SMART_Surveys_App/reassure_documentation/results/metadata.csv)
''
xwq
`1_)`
)
dq#`1`
exit()
log_file <- rio::import('C://Users/YamnaOuchtar/OneDrive - London School of Hygiene and Tropical Medicine/Documents/SMART_Surveys_App/reassure_documentation/results/metadata.csv')
# Calculate proportions for Plot 1
data_plot1 <- log_file |>
dplyr::count(type_survey) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(type_survey, ": ", round(percentage, 1), "%"))
# Plot 1: Pie chart for type_survey with percentages
plot1 <- ggplot2::ggplot(data = data_plot1, ggplot2::aes(x = "", y = n, fill = type_survey)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Comparison of SMART Surveys per Type") +
ggplot2::scale_fill_manual(values = c("#56B4E9", "#009E73", "#F0E442")) # Adjust colors if needed
# Calculate proportions for Plot 2
data_plot2 <- log_file |>
dplyr::count(is_issue) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(ifelse(is_issue, "With an Issue", "Without any issue"), ": ",
round(percentage, 1), "%"))
# Plot 2: Pie chart for is_issue with percentages
plot2 <- ggplot2::ggplot(data = data_plot2, ggplot2::aes(x = "", y = n, fill = is_issue)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Comparison of SMART Surveys with and Without Issues", fill = "Issue Status") +
ggplot2::scale_fill_manual(values = c("FALSE" = "#56B4E9", "TRUE" = "#E69F00"))
plot3 <- ggplot2::ggplot(data = log_file, ggplot2::aes(min_year_survey))+
ggplot2::geom_histogram(fill="#009E73")+
ggplot2::theme_bw() +
ggplot2::labs(x=ggplot2::element_blank(), y=ggplot2::element_blank(),
title='Comparison of SMART Surveys per year')
plot4 <- cowplot::plot_grid(plot1, plot2, plot3, labels = "AUTO")
plot4
# Calculate proportions for Plot 1
data_plot1 <- log_file |>
dplyr::count(type_survey) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(type_survey, ": ", round(percentage, 1), "%"))
# Plot 1: Pie chart for type_survey with percentages
plot1 <- ggplot2::ggplot(data = data_plot1, ggplot2::aes(x = "", y = n, fill = type_survey)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Comparison of SMART Surveys per Type", fill="Type of Surveys") +
ggplot2::scale_fill_manual(values = c("#56B4E9", "#009E73", "#F0E442")) # Adjust colors if needed
# Calculate proportions for Plot 2
data_plot2 <- log_file |>
dplyr::count(is_issue) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(ifelse(is_issue, "With an Issue", "Without any issue"), ": ",
round(percentage, 1), "%"))
# Plot 2: Pie chart for is_issue with percentages
plot2 <- ggplot2::ggplot(data = data_plot2, ggplot2::aes(x = "", y = n, fill = is_issue)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Comparison of SMART Surveys with and Without Issues", fill = "Issue Status") +
ggplot2::scale_fill_manual(values = c("FALSE" = "#56B4E9", "TRUE" = "#E69F00"))
plot3 <- ggplot2::ggplot(data = log_file, ggplot2::aes(min_year_survey))+
ggplot2::geom_histogram(fill="#009E73")+
ggplot2::theme_bw() +
ggplot2::labs(x=ggplot2::element_blank(), y=ggplot2::element_blank(),
title='Comparison of SMART Surveys per year')
plot4 <- cowplot::plot_grid(plot1, plot2, plot3, labels = "AUTO")
plot4
# Calculate proportions for Plot 1
data_plot1 <- log_file |>
dplyr::count(type_survey) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(round(percentage, 1), "%"))
# Plot 1: Pie chart for type_survey with percentages
plot1 <- ggplot2::ggplot(data = data_plot1, ggplot2::aes(x = "", y = n, fill = type_survey)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Comparison of SMART Surveys per Type", fill="Type of Surveys") +
ggplot2::scale_fill_manual(values = c("#56B4E9", "#009E73", "#F0E442")) # Adjust colors if needed
# Calculate proportions for Plot 2
data_plot2 <- log_file |>
dplyr::count(is_issue) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(ifelse(is_issue, "With an Issue", "Without any issue"), ": ",
round(percentage, 1), "%"))
# Plot 2: Pie chart for is_issue with percentages
plot2 <- ggplot2::ggplot(data = data_plot2, ggplot2::aes(x = "", y = n, fill = is_issue)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Comparison of SMART Surveys with and Without Issues", fill = "Issue Status") +
ggplot2::scale_fill_manual(values = c("FALSE" = "#56B4E9", "TRUE" = "#E69F00"))
plot3 <- ggplot2::ggplot(data = log_file, ggplot2::aes(min_year_survey))+
ggplot2::geom_histogram(fill="#009E73")+
ggplot2::theme_bw() +
ggplot2::labs(x=ggplot2::element_blank(), y=ggplot2::element_blank(),
title='Comparison of SMART Surveys per year')
plot4 <- cowplot::plot_grid(plot1, plot2, plot3, labels = "AUTO")
plot4
# Calculate proportions for Plot 1
data_plot1 <- log_file |>
dplyr::count(type_survey) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(round(percentage, 1), "%"))
# Plot 1: Pie chart for type_survey with percentages
plot1 <- ggplot2::ggplot(data = data_plot1, ggplot2::aes(x = "", y = n, fill = type_survey)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Comparison of SMART Surveys per Type", fill="Type of Surveys") +
ggplot2::scale_fill_manual(values = c("#56B4E9", "#009E73", "#F0E442")) # Adjust colors if needed
# Calculate proportions for Plot 2
data_plot2 <- log_file |>
dplyr::count(is_issue) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(round(percentage, 1), "%"))
# Plot 2: Pie chart for is_issue with percentages
plot2 <- ggplot2::ggplot(data = data_plot2, ggplot2::aes(x = "", y = n, fill = is_issue)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Comparison of SMART Surveys with and Without Issues", fill = "Issue Status") +
ggplot2::scale_fill_manual(values = c("FALSE" = "#56B4E9", "TRUE" = "#E69F00"))
plot3 <- ggplot2::ggplot(data = log_file, ggplot2::aes(min_year_survey))+
ggplot2::geom_histogram(fill="#009E73")+
ggplot2::theme_bw() +
ggplot2::labs(x=ggplot2::element_blank(), y=ggplot2::element_blank(),
title='Comparison of SMART Surveys per year')
plot4 <- cowplot::plot_grid(plot1, plot2, plot3, labels = "AUTO")
plot4
# Calculate proportions for Plot 1
data_plot1 <- log_file |>
dplyr::count(type_survey) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(round(percentage, 1), "%"))
# Plot 1: Pie chart for type_survey with percentages
plot1 <- ggplot2::ggplot(data = data_plot1, ggplot2::aes(x = "", y = n, fill = type_survey)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Analysis of SMART surveys by type.", fill="Type of Surveys") +
ggplot2::scale_fill_manual(values = c("#56B4E9", "#009E73", "#F0E442")) # Adjust colors if needed
# Calculate proportions for Plot 2
data_plot2 <- log_file |>
dplyr::count(is_issue) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(round(percentage, 1), "%"))
# Plot 2: Pie chart for is_issue with percentages
plot2 <- ggplot2::ggplot(data = data_plot2, ggplot2::aes(x = "", y = n, fill = is_issue)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Percentage of issues raised when extracting content from the SMART survey.", fill = "Status:") +
ggplot2::scale_fill_manual(values = c("No Issue" = "#56B4E9", "Issues found" = "#E69F00"))
plot3 <- ggplot2::ggplot(data = log_file, ggplot2::aes(min_year_survey))+
ggplot2::geom_histogram(fill="#009E73")+
ggplot2::theme_bw() +
ggplot2::labs(x=ggplot2::element_blank(), y=ggplot2::element_blank(),
title='Comparison of SMART Surveys per year')
plot4 <- cowplot::plot_grid(plot1, plot2, plot3, labels = "AUTO")
plot4
# Calculate proportions for Plot 1
data_plot1 <- log_file |>
dplyr::count(type_survey) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(round(percentage, 1), "%"))
# Plot 1: Pie chart for type_survey with percentages
plot1 <- ggplot2::ggplot(data = data_plot1, ggplot2::aes(x = "", y = n, fill = type_survey)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Analysis of SMART surveys by type.", fill="Type of Surveys") +
ggplot2::scale_fill_manual(values = c("#56B4E9", "#009E73", "#F0E442")) # Adjust colors if needed
# Calculate proportions for Plot 2
data_plot2 <- log_file |>
dplyr::count(is_issue) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(round(percentage, 1), "%"))
# Plot 2: Pie chart for is_issue with percentages
plot2 <- ggplot2::ggplot(data = data_plot2, ggplot2::aes(x = "", y = n, fill = is_issue)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Percentage of issues raised when extracting content from the SMART survey.", fill = "Issues found:") +
ggplot2::scale_fill_manual(values = c("FALSE" = "#56B4E9", "TRUE" = "#E69F00"))
plot3 <- ggplot2::ggplot(data = log_file, ggplot2::aes(min_year_survey))+
ggplot2::geom_histogram(fill="#009E73")+
ggplot2::theme_bw() +
ggplot2::labs(x=ggplot2::element_blank(), y=ggplot2::element_blank(),
title='Comparison of SMART Surveys per year')
plot4 <- cowplot::plot_grid(plot1, plot2, plot3, labels = "AUTO")
plot4
# Calculate proportions for Plot 1
data_plot1 <- log_file |>
dplyr::count(type_survey) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(round(percentage, 1), "%"))
# Plot 1: Pie chart for type_survey with percentages
plot1 <- ggplot2::ggplot(data = data_plot1, ggplot2::aes(x = "", y = n, fill = type_survey)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Analysis of SMART surveys by type.", fill="Type of Surveys") +
ggplot2::scale_fill_manual(values = c("#56B4E9", "#009E73", "#F0E442")) # Adjust colors if needed
# Calculate proportions for Plot 2
data_plot2 <- log_file |>
dplyr::count(is_issue) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(round(percentage, 1), "%"))
# Plot 2: Pie chart for is_issue with percentages
plot2 <- ggplot2::ggplot(data = data_plot2, ggplot2::aes(x = "", y = n, fill = is_issue)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Percentage of issues raised when extracting content from the SMART survey.", fill = "Issues found:") +
ggplot2::scale_fill_manual(values = c("FALSE" = "#56B4E9", "TRUE" = "#E69F00"))
plot3 <- ggplot2::ggplot(data = log_file, ggplot2::aes(min_year_survey))+
ggplot2::geom_histogram(fill="#009E73")+
ggplot2::theme_bw() +
ggplot2::labs(x=ggplot2::element_blank(), y=ggplot2::element_blank(),
title='Analysis of SMART survey content extracted per year.')
plot4 <- cowplot::plot_grid(plot1, plot2, plot3, labels = "AUTO")
plot4
as.Date(log_file$min_year_survey)
log_file$min_year_survey
lubridate::year(log_file$min_year_survey)
lubridate::year(as.Date(paste0(log_file$min_year_survey, '/', log_file$min_month_survey, '/', log_file$min_day_survey)))
# Calculate proportions for Plot 1
data_plot1 <- log_file |>
dplyr::count(type_survey) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(round(percentage, 1), "%"))
# Plot 1: Pie chart for type_survey with percentages
plot1 <- ggplot2::ggplot(data = data_plot1, ggplot2::aes(x = "", y = n, fill = type_survey)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Analysis of SMART surveys by type.", fill="Type of Surveys") +
ggplot2::scale_fill_manual(values = c("#56B4E9", "#009E73", "#F0E442")) # Adjust colors if needed
# Calculate proportions for Plot 2
data_plot2 <- log_file |>
dplyr::count(is_issue) |>
dplyr::mutate(percentage = n / sum(n) * 100,
label = paste0(round(percentage, 1), "%"))
# Plot 2: Pie chart for is_issue with percentages
plot2 <- ggplot2::ggplot(data = data_plot2, ggplot2::aes(x = "", y = n, fill = is_issue)) +
ggplot2::geom_bar(stat = "identity", width = 1, color = "white") +
ggplot2::coord_polar(theta = "y") +
ggplot2::theme_void() +
ggplot2::geom_text(ggplot2::aes(label = label), position = ggplot2::position_stack(vjust = 0.5)) +
ggplot2::labs(title = "Percentage of issues raised when extracting SMART contents.", fill = "Issues found:") +
ggplot2::scale_fill_manual(values = c("FALSE" = "#56B4E9", "TRUE" = "#E69F00"))
log_file$min_year_survey <- lubridate::year(as.Date(paste0(log_file$min_year_survey, '/', log_file$min_month_survey, '/', log_file$min_day_survey)))
plot3 <- ggplot2::ggplot(data = log_file, ggplot2::aes(min_year_survey))+
ggplot2::geom_histogram(fill="#009E73")+
ggplot2::theme_bw() +
ggplot2::labs(x=ggplot2::element_blank(), y=ggplot2::element_blank(),
title='Analysis of SMART survey content extracted per year.')
plot4 <- cowplot::plot_grid(plot1, plot2, plot3, labels = "AUTO")
plot4
log_file
log_file$min_year_survey <- as.Date(paste0(metadata$min_year_survey, "-01-01"))
log_file$min_year_survey <- as.Date(paste0(log_file$min_year_survey, "-01-01"))
plot3 <- ggplot2::ggplot(data = log_file, ggplot2::aes(min_year_survey))+
ggplot2::geom_histogram(fill="#009E73")+
ggplot2::theme_bw() +
ggplot2::scale_x_date(
date_breaks = "1 year",
date_labels = "%Y",
name = "Year"
) +
ggplot2::labs(x=ggplot2::element_blank(), y=ggplot2::element_blank(),
title='Analysis of SMART survey content extracted per year.')
plot3
