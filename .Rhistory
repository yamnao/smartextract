}
}
return(final_res)
}
#' Function to return the right list of settlement depending of the country
#'
#' @details Settlement lists (admin1)
#' @param country Specified country of interest
#' @return [data.frame] DataFrame with all the possibility of admin1 to match SMART Surveys infos
#' @export
f_location_possibility <- function(country ='SOM'){
if(country == 'SOM'){
data <- rio::import('data/som_admins_options.rda') |>
dplyr::mutate(eventual_name = tolower(gsub("[[:punct:]]+", "", eventual_name)))
return(data)
}else if(country == 'KEN'){
data <- rio::import('data/ken_admins_options.rda') |>
dplyr::mutate(eventual_name = tolower(gsub("[[:punct:]]+", "", iconv(eventual_name,"WINDOWS-1252","UTF-8"))))
return(data)
}else{
return(c('Please specify a correct country'))
}
}
#' Function to add a name in the list of options to match the SMART Survey list
#' Save the output in the right rda
#'
#' @details Add something to the list
#' @param country Specified country of interest
#' @param list_to_add contains eventual name, right_name and level
#' @export
f_add_element_to_admins <- function(country, list_to_add){
if(country == 'SOM'){
som_admins_options <- rio::import(file = 'data/som_admins_options.rda')
som_admins_options <- rbind(list_to_add, som_admins_options)
save(som_admins_options, file = 'data/som_admins_options.rda')
}else if(country == 'KEN'){
ken_admins_options <- rio::import(file = 'data/ken_admins_options.rda')
ken_admins_options <- rbind(list_to_add, ken_admins_options)
save(ken_admins_options, file = 'data/ken_admins_options.rda')
}else{
return(c('Please specify a correct country'))
}
}
country = 'SOM'
admins_list <- f_location_possibility(country)
admins_list
# Generate and creat issue folder
create_issue_folder(output_folder)
output_folder <- 'ext_data/smart_surveys/somalia/'
smart_folder <- 'ext_data/smart_surveys/somalia/'
output_folder <- 'ext_data/smart_surveys/results/'
f_sort_smart(smart_folder, output_folder, country, admins_list)
f_deal_with_issues(country, output_folder, admins_list)
print(paste('The name of the SMART Survey is: ', file, sep=""))
admin_name <- readline(prompt="Probably the name is writing with some issue, could you provide any information of the admin level of this SMART ?")
admin_name <- tolower(admin_name)
# First be sure we are comparing everything without punctuations and spaces
admin_list <- admins_list |>
dplyr::mutate(eventual_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", eventual_name)),
right_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", right_name)))
admin_name %in% admin_list$right_name_low
level <- admin_list[which(admin_name == admin_list$right_name_low), 'level']
log_file[which(log_file$old_name == file), 'type_of_issue'] <- ""
log_file <- read.csv(paste(output_folder, '/log_file.csv', sep=""))
log_file[which(log_file$old_name == file), 'type_of_issue'] <- ""
file
files <- list.files(paste(output_folder, '/smart_with_issue', sep=""))
files
file <- files[4]
print(paste('The name of the SMART Survey is: ', file, sep=""))
admin_name <- readline(prompt="Probably the name is writing with some issue, could you provide any information of the admin level of this SMART ?")
admin_name <- tolower(admin_name)
# First be sure we are comparing everything without punctuations and spaces
admin_list <- admins_list |>
dplyr::mutate(eventual_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", eventual_name)),
right_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", right_name)))
level <- admin_list[which(admin_name == admin_list$right_name_low), 'level']
log_file[which(log_file$old_name == file), 'type_of_issue'] <- ""
log_file[which(log_file$old_name == file), 'issue'] <- FALSE
log_file[which(log_file$old_name == file), 'admin_level_survey'] <- level
log_file[which(log_file$old_name == file), 'admin_name_survey'] <- admin_name
level
level <- admin_list[which(admin_name == admin_list$right_name_low), 'level'][1]
log_file[which(log_file$old_name == file), 'type_of_issue'] <- ""
log_file[which(log_file$old_name == file), 'issue'] <- FALSE
log_file[which(log_file$old_name == file), 'admin_level_survey'] <- level
log_file[which(log_file$old_name == file), 'admin_name_survey'] <- admin_name
infos <- c(log_file[which(log_file$old_name == file), 'admin_level_survey'][1],
log_file[which(log_file$old_name == file), 'admin_name_survey'][1],
log_file[which(log_file$old_name == file), 'year_survey'][1],
log_file[which(log_file$old_name == file), 'month_survey'][1])
log_file[which(log_file$old_name == file), 'new_name'] <- paste(stringr::str_to_lower(country), '_',
infos[1], '_',
gsub("\u00a0", "", infos[2]), '_',
infos[3],
'_', infos[4], '_', 0, sep='')
# Save the file and its content
file_path <- paste(smart_folder, file, sep="")
# Read the .as content
smart_content <- readLines(file_path)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, log_file[which(log_file$old_name == file), 'type_survey'][1])
clusters_data <- f_extract_clusters_data(smart_content)
# Save the smart data
folder_name <- paste(output_folder, '/', log_file[which(log_file$old_name == file), 'new_name'][1], sep="")
check_and_generate_folder(folder_name)
file.copy(paste(smart_folder, file, sep = ""),
folder_name)
write.table(nutrition_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'nutrition_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(mortality_data, file = paste(folder_name,'/', log_file[which(log_file$old_name == file), 'new_name'][1], 'mortality_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(clusters_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'clusters_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
unlink(paste(paste(output_folder, '/smart_with_issue/', sep=""), file, sep=""))
f_deal_with_issues(country, output_folder, admins_list)
#' Function to check the different issue files
#'
#' @param log_file log file
#' @param output_folder output_folder
#'
f_deal_with_issues <- function(country, output_folder, admins_list){
files <- list.files(paste(output_folder, '/smart_with_issue', sep=""))
log_file <- read.csv(paste(output_folder, '/log_file.csv', sep=""))
for(file in files){
type_of_issue <- log_file[which(log_file$old_name == file), 'type_of_issue'][1]
# First issue possible --  Unknow Date
if(grepl(type_of_issue,'Unknown Date')){
year <- readline(prompt="Could you enter the year of the SMART Survey: ")
month <- readline(prompt="Could you enter the month of the SMART Survey: ")
if(year < as.integer(format(Sys.Date(), "%Y"))){
# Update log file
log_file[which(log_file$old_name == file), 'type_of_issue'] <- ""
log_file[which(log_file$old_name == file), 'issue'] <- FALSE
log_file[which(log_file$old_name == file), 'year_survey'] <- year
log_file[which(log_file$old_name == file), 'month_survey'] <- month
infos <- c(log_file[which(log_file$old_name == file), 'admin_level_survey'][1],
log_file[which(log_file$old_name == file), 'admin_name_survey'][1],
year, month)
log_file[which(log_file$old_name == file), 'new_name'] <- paste(stringr::str_to_lower(country), '_',
infos[1], '_',
gsub("\u00a0", "", infos[2]), '_',
infos[3],
'_', infos[4], '_', 0, sep='')
# Save the file and its content
file_path <- paste(smart_folder, file, sep="")
# Read the .as content
smart_content <- readLines(file_path)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, log_file[which(log_file$old_name == file), 'type_survey'][1])
clusters_data <- f_extract_clusters_data(smart_content)
# Save the smart data
folder_name <- paste(output_folder, '/', log_file[which(log_file$old_name == file), 'new_name'][1], sep="")
check_and_generate_folder(folder_name)
file.copy(paste(smart_folder, file, sep = ""),
folder_name)
write.table(nutrition_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'nutrition_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(mortality_data, file = paste(folder_name,'/', log_file[which(log_file$old_name == file), 'new_name'][1], 'mortality_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(clusters_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'clusters_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
unlink(paste(paste(output_folder, '/smart_with_issue/', sep=""), file, sep=""))
}
}else if(grepl(type_of_issue,'Unknown Admin')){
print(paste('The name of the SMART Survey is: ', file, sep=""))
admin_name <- readline(prompt="Probably the name is writing with some issue, could you provide any information of the admin level of this SMART ?")
admin_name <- tolower(admin_name)
# First be sure we are comparing everything without punctuations and spaces
admin_list <- admins_list |>
dplyr::mutate(eventual_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", eventual_name)),
right_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", right_name)))
if(admin_name %in% admin_list$right_name_low){
level <- admin_list[which(admin_name == admin_list$right_name_low), 'level'][1]
log_file[which(log_file$old_name == file), 'type_of_issue'] <- ""
log_file[which(log_file$old_name == file), 'issue'] <- FALSE
log_file[which(log_file$old_name == file), 'admin_level_survey'] <- level
log_file[which(log_file$old_name == file), 'admin_name_survey'] <- admin_name
infos <- c(log_file[which(log_file$old_name == file), 'admin_level_survey'][1],
log_file[which(log_file$old_name == file), 'admin_name_survey'][1],
log_file[which(log_file$old_name == file), 'year_survey'][1],
log_file[which(log_file$old_name == file), 'month_survey'][1])
log_file[which(log_file$old_name == file), 'new_name'] <- paste(stringr::str_to_lower(country), '_',
infos[1], '_',
gsub("\u00a0", "", infos[2]), '_',
infos[3],
'_', infos[4], '_', 0, sep='')
# Save the file and its content
file_path <- paste(smart_folder, file, sep="")
# Read the .as content
smart_content <- readLines(file_path)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, log_file[which(log_file$old_name == file), 'type_survey'][1])
clusters_data <- f_extract_clusters_data(smart_content)
# Save the smart data
folder_name <- paste(output_folder, '/', log_file[which(log_file$old_name == file), 'new_name'][1], sep="")
check_and_generate_folder(folder_name)
file.copy(paste(smart_folder, file, sep = ""),
folder_name)
write.table(nutrition_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'nutrition_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(mortality_data, file = paste(folder_name,'/', log_file[which(log_file$old_name == file), 'new_name'][1], 'mortality_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(clusters_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'clusters_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
unlink(paste(paste(output_folder, '/smart_with_issue/', sep=""), file, sep=""))
}
}
}
}
#' Function to read all the SMART Survey & save the different structure in the right folder & generate issue folder
#'
#' @param smart_folder Folder where the .as file are saved
#' @param output_folder Folder where the results need to be saved
#' @export
f_sort_smart <- function(smart_folder, output_folder, country, admins_list){
# Generate and creat issue folder
create_issue_folder(output_folder)
# Generate and create a log file  for the raw folder
log_file <- generate_log_file(output_folder)
# List SMART Survey needed to be updated
files <- list.files(smart_folder, pattern='\\.as$')
# Loop over them
for(file in files){
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[6])
clusters_data <- f_extract_clusters_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos, nutrition_data, mortality_data, clusters_data)
# Save the smart data
f_save_smart(smart_folder, output_folder, file, new_name,
infos, nutrition_data, mortality_data, clusters_data)
}
write.table(log_file, file = paste(output_folder, '/log_file.csv', sep=""), append = FALSE,
sep=',', col.names=TRUE, row.names = FALSE)
}
f_deal_with_issues(country, output_folder, admins_list)
files
files <- list.files(paste(output_folder, '/smart_with_issue', sep=""))
log_file <- read.csv(paste(output_folder, '/log_file.csv', sep=""))
files
file <- files[2]
print(paste('The name of the SMART Survey is: ', file, sep=""))
admin_name <- readline(prompt="Probably the name is writing with some issue, could you provide any information of the admin level of this SMART ?")
admin_name <- tolower(admin_name)
# First be sure we are comparing everything without punctuations and spaces
admin_list <- admins_list |>
dplyr::mutate(eventual_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", eventual_name)),
right_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", right_name)))
admin_name %in% admin_list$right_name_low
level <- admin_list[which(admin_name == admin_list$right_name_low), 'level'][1]
log_file[which(log_file$old_name == file), 'type_of_issue'] <- ""
log_file[which(log_file$old_name == file), 'issue'] <- FALSE
log_file[which(log_file$old_name == file), 'admin_level_survey'] <- level
log_file[which(log_file$old_name == file), 'admin_name_survey'] <- admin_name
infos <- c(log_file[which(log_file$old_name == file), 'admin_level_survey'][1],
log_file[which(log_file$old_name == file), 'admin_name_survey'][1],
log_file[which(log_file$old_name == file), 'year_survey'][1],
log_file[which(log_file$old_name == file), 'month_survey'][1])
log_file[which(log_file$old_name == file), 'new_name'] <- paste(stringr::str_to_lower(country), '_',
infos[1], '_',
gsub("\u00a0", "", infos[2]), '_',
infos[3],
'_', infos[4], '_', 0, sep='')
# Save the file and its content
file_path <- paste(smart_folder, file, sep="")
# Read the .as content
smart_content <- readLines(file_path)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, log_file[which(log_file$old_name == file), 'type_survey'][1])
clusters_data <- f_extract_clusters_data(smart_content)
# Save the smart data
folder_name <- paste(output_folder, '/', log_file[which(log_file$old_name == file), 'new_name'][1], sep="")
check_and_generate_folder(folder_name)
file.copy(paste(smart_folder, file, sep = ""),
folder_name)
write.table(nutrition_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'nutrition_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(mortality_data, file = paste(folder_name,'/', log_file[which(log_file$old_name == file), 'new_name'][1], 'mortality_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(clusters_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'clusters_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
#' Function to check the different issue files
#'
#' @param log_file log file
#' @param output_folder output_folder
#'
f_deal_with_issues <- function(country, output_folder, admins_list){
files <- list.files(paste(output_folder, '/smart_with_issue', sep=""))
log_file <- read.csv(paste(output_folder, '/log_file.csv', sep=""))
for(file in files){
type_of_issue <- log_file[which(log_file$old_name == file), 'type_of_issue'][1]
# First issue possible --  Unknow Date
if(grepl(type_of_issue,'Unknown Date')){
year <- readline(prompt="Could you enter the year of the SMART Survey: ")
month <- readline(prompt="Could you enter the month of the SMART Survey: ")
if(year < as.integer(format(Sys.Date(), "%Y"))){
# Update log file
log_file[which(log_file$old_name == file), 'type_of_issue'] <- ""
log_file[which(log_file$old_name == file), 'issue'] <- FALSE
log_file[which(log_file$old_name == file), 'year_survey'] <- year
log_file[which(log_file$old_name == file), 'month_survey'] <- month
infos <- c(log_file[which(log_file$old_name == file), 'admin_level_survey'][1],
log_file[which(log_file$old_name == file), 'admin_name_survey'][1],
year, month)
log_file[which(log_file$old_name == file), 'new_name'] <- paste(stringr::str_to_lower(country), '_',
infos[1], '_',
gsub("\u00a0", "", infos[2]), '_',
infos[3],
'_', infos[4], '_', 0, sep='')
# Save the file and its content
file_path <- paste(smart_folder, file, sep="")
# Read the .as content
smart_content <- readLines(file_path)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, log_file[which(log_file$old_name == file), 'type_survey'][1])
clusters_data <- f_extract_clusters_data(smart_content)
# Save the smart data
folder_name <- paste(output_folder, '/', log_file[which(log_file$old_name == file), 'new_name'][1], sep="")
check_and_generate_folder(folder_name)
file.copy(paste(smart_folder, file, sep = ""),
folder_name)
write.table(nutrition_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'nutrition_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(mortality_data, file = paste(folder_name,'/', log_file[which(log_file$old_name == file), 'new_name'][1], 'mortality_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(clusters_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'clusters_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
unlink(paste(paste(output_folder, '/smart_with_issue/', sep=""), file, sep=""))
}
}else if(grepl(type_of_issue,'Unknown Admin')){
print(paste('The name of the SMART Survey is: ', file, sep=""))
admin_name <- readline(prompt="Probably the name is writing with some issue, could you provide any information of the admin level of this SMART ?")
admin_name <- tolower(admin_name)
# First be sure we are comparing everything without punctuations and spaces
admin_list <- admins_list |>
dplyr::mutate(eventual_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", eventual_name)),
right_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", right_name)))
if(admin_name %in% admin_list$right_name_low){
level <- admin_list[which(admin_name == admin_list$right_name_low), 'level'][1]
log_file[which(log_file$old_name == file), 'type_of_issue'] <- ""
log_file[which(log_file$old_name == file), 'issue'] <- FALSE
log_file[which(log_file$old_name == file), 'admin_level_survey'] <- level
log_file[which(log_file$old_name == file), 'admin_name_survey'] <- admin_name
infos <- c(log_file[which(log_file$old_name == file), 'admin_level_survey'][1],
log_file[which(log_file$old_name == file), 'admin_name_survey'][1],
log_file[which(log_file$old_name == file), 'year_survey'][1],
log_file[which(log_file$old_name == file), 'month_survey'][1])
log_file[which(log_file$old_name == file), 'new_name'] <- paste(stringr::str_to_lower(country), '_',
infos[1], '_',
gsub("\u00a0", "", infos[2]), '_',
infos[3],
'_', infos[4], '_', 0, sep='')
# Save the file and its content
file_path <- paste(smart_folder, file, sep="")
# Read the .as content
smart_content <- readLines(file_path)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, log_file[which(log_file$old_name == file), 'type_survey'][1])
clusters_data <- f_extract_clusters_data(smart_content)
# Save the smart data
folder_name <- paste(output_folder, '/', log_file[which(log_file$old_name == file), 'new_name'][1], sep="")
check_and_generate_folder(folder_name)
file.copy(paste(smart_folder, file, sep = ""),
folder_name)
write.table(nutrition_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'nutrition_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(mortality_data, file = paste(folder_name,'/', log_file[which(log_file$old_name == file), 'new_name'][1], 'mortality_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(clusters_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'clusters_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
unlink(paste(paste(output_folder, '/smart_with_issue/', sep=""), file, sep=""))
}
}
}
}
f_deal_with_issues(country, output_folder, admins_list)
# Generate and creat issue folder
create_issue_folder(output_folder)
# Generate and create a log file  for the raw folder
log_file <- generate_log_file(output_folder)
# List SMART Survey needed to be updated
files <- list.files(smart_folder, pattern='\\.as$')
# Loop over them
for(file in files){
# Extract the path of the file & its name
file_path <- paste(smart_folder, file, sep="")
name_file <- file
# Read the .as content
smart_content <- readLines(file_path)
# Extract info in the .as content
infos <- f_extract_info_smart(name_file, smart_content, admins_list)
# Generate new name
new_name <- f_generate_new_name(log_file, country, infos)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, infos[6])
clusters_data <- f_extract_clusters_data(smart_content)
# Update the logfile
log_file <- f_update_log_file(log_file, name_file, new_name, infos, nutrition_data, mortality_data, clusters_data)
# Save the smart data
f_save_smart(smart_folder, output_folder, file, new_name,
infos, nutrition_data, mortality_data, clusters_data)
}
write.table(log_file, file = paste(output_folder, '/log_file.csv', sep=""), append = FALSE,
sep=',', col.names=TRUE, row.names = FALSE)
files <- list.files(paste(output_folder, '/smart_with_issue', sep=""))
log_file <- read.csv(paste(output_folder, '/log_file.csv', sep=""))
for(file in files){
type_of_issue <- log_file[which(log_file$old_name == file), 'type_of_issue'][1]
# First issue possible --  Unknow Date
if(grepl(type_of_issue,'Unknown Date')){
year <- readline(prompt="Could you enter the year of the SMART Survey: ")
month <- readline(prompt="Could you enter the month of the SMART Survey: ")
if(year < as.integer(format(Sys.Date(), "%Y"))){
# Update log file
log_file[which(log_file$old_name == file), 'type_of_issue'] <- ""
log_file[which(log_file$old_name == file), 'issue'] <- FALSE
log_file[which(log_file$old_name == file), 'year_survey'] <- year
log_file[which(log_file$old_name == file), 'month_survey'] <- month
infos <- c(log_file[which(log_file$old_name == file), 'admin_level_survey'][1],
log_file[which(log_file$old_name == file), 'admin_name_survey'][1],
year, month)
log_file[which(log_file$old_name == file), 'new_name'] <- paste(stringr::str_to_lower(country), '_',
infos[1], '_',
gsub("\u00a0", "", infos[2]), '_',
infos[3],
'_', infos[4], '_', 0, sep='')
# Save the file and its content
file_path <- paste(smart_folder, file, sep="")
# Read the .as content
smart_content <- readLines(file_path)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, log_file[which(log_file$old_name == file), 'type_survey'][1])
clusters_data <- f_extract_clusters_data(smart_content)
# Save the smart data
folder_name <- paste(output_folder, '/', log_file[which(log_file$old_name == file), 'new_name'][1], sep="")
check_and_generate_folder(folder_name)
file.copy(paste(smart_folder, file, sep = ""),
folder_name)
write.table(nutrition_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'nutrition_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(mortality_data, file = paste(folder_name,'/', log_file[which(log_file$old_name == file), 'new_name'][1], 'mortality_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(clusters_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'clusters_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
unlink(paste(paste(output_folder, '/smart_with_issue/', sep=""), file, sep=""))
}
}else if(grepl(type_of_issue,'Unknown Admin')){
print(paste('The name of the SMART Survey is: ', file, sep=""))
admin_name <- readline(prompt="Probably the name is writing with some issue, could you provide any information of the admin level of this SMART ?")
admin_name <- tolower(admin_name)
# First be sure we are comparing everything without punctuations and spaces
admin_list <- admins_list |>
dplyr::mutate(eventual_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", eventual_name)),
right_name_low = tolower(gsub("[[:punct:][:blank:]]+", "", right_name)))
if(admin_name %in% admin_list$right_name_low){
level <- admin_list[which(admin_name == admin_list$right_name_low), 'level'][1]
log_file[which(log_file$old_name == file), 'type_of_issue'] <- ""
log_file[which(log_file$old_name == file), 'issue'] <- FALSE
log_file[which(log_file$old_name == file), 'admin_level_survey'] <- level
log_file[which(log_file$old_name == file), 'admin_name_survey'] <- admin_name
infos <- c(log_file[which(log_file$old_name == file), 'admin_level_survey'][1],
log_file[which(log_file$old_name == file), 'admin_name_survey'][1],
log_file[which(log_file$old_name == file), 'year_survey'][1],
log_file[which(log_file$old_name == file), 'month_survey'][1])
log_file[which(log_file$old_name == file), 'new_name'] <- paste(stringr::str_to_lower(country), '_',
infos[1], '_',
gsub("\u00a0", "", infos[2]), '_',
infos[3],
'_', infos[4], '_', 0, sep='')
# Save the file and its content
file_path <- paste(smart_folder, file, sep="")
# Read the .as content
smart_content <- readLines(file_path)
# Extract nutrution, mortality and clusters infos
nutrition_data <- f_extract_nutrition_data(smart_content)
mortality_data <- f_extract_mortality_data(smart_content, log_file[which(log_file$old_name == file), 'type_survey'][1])
clusters_data <- f_extract_clusters_data(smart_content)
# Save the smart data
folder_name <- paste(output_folder, '/', log_file[which(log_file$old_name == file), 'new_name'][1], sep="")
check_and_generate_folder(folder_name)
file.copy(paste(smart_folder, file, sep = ""),
folder_name)
write.table(nutrition_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'nutrition_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(mortality_data, file = paste(folder_name,'/', log_file[which(log_file$old_name == file), 'new_name'][1], 'mortality_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
write.table(clusters_data, file = paste(folder_name, '/', log_file[which(log_file$old_name == file), 'new_name'][1], 'clusters_data.csv', sep=""),
append = FALSE, sep=',', col.names=TRUE, row.names = FALSE)
unlink(paste(paste(output_folder, '/smart_with_issue/', sep=""), file, sep=""))
}
}
}
library(smartextract)
